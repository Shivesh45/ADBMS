-- ================================
-- Combined Script: Part A, B, C
-- ================================

-- Step 0: Create table with UNIQUE constraint
CREATE TABLE IF NOT EXISTS StudentEnrollments (
    enrollment_id INT PRIMARY KEY,
    student_name VARCHAR(100) NOT NULL,
    course_id VARCHAR(10) NOT NULL,
    enrollment_date DATE NOT NULL,
    UNIQUE(student_name, course_id)   -- Prevent duplicate enrollment
);

-- Step 1: Insert sample data
INSERT INTO StudentEnrollments (enrollment_id, student_name, course_id, enrollment_date)
VALUES 
(1, 'Ashish', 'CSE101', '2024-07-01'),
(2, 'Smaran', 'CSE102', '2024-07-01'),
(3, 'Vaibhav', 'CSE101', '2024-07-01')
ON DUPLICATE KEY UPDATE enrollment_id = enrollment_id; -- ignore duplicates

-- ================================
-- Part A: Prevent Duplicate Enrollments
-- ================================
-- Simulate two users trying to enroll same student in same course

-- User 1
START TRANSACTION;
INSERT INTO StudentEnrollments (enrollment_id, student_name, course_id, enrollment_date)
VALUES (4, 'Ashish', 'CSE101', '2024-07-02');
COMMIT;

-- User 2 (will fail due to UNIQUE constraint)
START TRANSACTION;
INSERT INTO StudentEnrollments (enrollment_id, student_name, course_id, enrollment_date)
VALUES (5, 'Ashish', 'CSE101', '2024-07-02');
-- This will throw: Duplicate entry for key 'student_name_course_id'
COMMIT;

-- ================================
-- Part B: Row-Level Locking Using SELECT FOR UPDATE
-- ================================
-- Simulate User A locking a row for verification

-- User A starts transaction and locks the row
START TRANSACTION;
SELECT * 
FROM StudentEnrollments 
WHERE student_name = 'Ashish' AND course_id = 'CSE101'
FOR UPDATE;

-- User A can now safely check/update the record
-- Keep transaction open; do not commit yet

-- User B tries to update same row (will be blocked until User A commits)
START TRANSACTION;
UPDATE StudentEnrollments
SET enrollment_date = '2024-08-01'
WHERE student_name = 'Ashish' AND course_id = 'CSE101';
-- User B waits here until User A commits
COMMIT;

-- User A commits
COMMIT;

-- ================================
-- Part C: Demonstrating Consistency with Locking
-- ================================
-- Simulate concurrent updates to same row

-- User A transaction
START TRANSACTION;
SELECT * 
FROM StudentEnrollments 
WHERE student_name = 'Ashish' AND course_id = 'CSE101'
FOR UPDATE;

UPDATE StudentEnrollments
SET enrollment_date = '2024-08-01'
WHERE student_name = 'Ashish' AND course_id = 'CSE101';
-- Keep transaction open for demonstration

-- User B transaction
START TRANSACTION;
SELECT * 
FROM StudentEnrollments 
WHERE student_name = 'Ashish' AND course_id = 'CSE101'
FOR UPDATE;
-- User B waits until User A commits

-- Commit User A first
COMMIT;

-- Now User B continues and commits
UPDATE StudentEnrollments
SET enrollment_date = '2024-09-01'
WHERE student_name = 'Ashish' AND course_id = 'CSE101';
COMMIT;

-- ================================
-- End of Combined Script
-- ================================
